package com.example.tutorial.tool;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

import com.google.common.io.CharStreams;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Message.Builder;
import com.google.protobuf.util.JsonFormat;
import com.google.protobuf.util.JsonFormat.Parser;
import com.google.protobuf.util.JsonFormat.Printer;

import io.grpc.MethodDescriptor.Marshaller;
import io.grpc.Status;

/**
 * 使用json格式传输报文时，需要使用此报文轮换器
 *
 * @param <T>
 */
public final class JsonMarshaller<T extends Message> implements Marshaller<T> {

	private final Parser parser = JsonFormat.parser();
	private final Printer printer = JsonFormat.printer().omittingInsignificantWhitespace();

	private final T defaultInstance;

	public JsonMarshaller(T defaultInstance) {
		this.defaultInstance = defaultInstance;
	}

	@Override
	public InputStream stream(T value) {
		try {
			return new ByteArrayInputStream(printer.print(value).getBytes(StandardCharsets.UTF_8));
		} catch (InvalidProtocolBufferException e) {
			throw Status.INTERNAL.withCause(e).withDescription("Unable to create json").asRuntimeException();
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public T parse(InputStream stream) {
		T proto = null;
		try {
			Builder builder = defaultInstance.newBuilderForType();
			String text = CharStreams.toString(new InputStreamReader(stream, StandardCharsets.UTF_8));

			parser.merge(text, builder);
			proto = (T) builder.build();
		} catch (Exception e) {
			throw Status.INTERNAL.withDescription("Unable to parse json").withCause(e).asRuntimeException();
		}

		return proto;
	}
}
